namespace Equation {
	class GLSLCompiler {
		var shadeAreaUnderCurve = false
		var hideCurve = false
		var _functions StringMap<int> = null

		def compile(node Node) string {
			shadeAreaUnderCurve = false
			hideCurve = false
			_functions = {}

			var source = _compile(node)
			var functions = "uniform float nan;" # NaN must be passed in so the driver doesn't remove it

			if "log10" in _functions {
				functions +=
					"float log10(float x){" +
						"return log(x)/log(10.);" +
					"}"
			}

			if "_pow" in _functions {
				functions +=
					"float _pow(float x,float y){" +
						"return " +
							"y!=ceil(y)?x<0.?nan:pow(max(x,0.),y):" +
							"y==0.?1.:pow(x,y-1.)*x;" +
					"}"
			}

			if "gamma" in _functions {
				functions +=
					"float gamma(float x){" +
						"float a=x<0.?1.-x:x,b=a+5.5,c=exp((a+.5)*log(b)-b+log(2.5066282*(1.+76.18009/(a+1.)-86.50532" +
							"/(a+2.)+24.0141/(a+3.)-1.2317395/(a+4.)+.001208651/(a+5.)-.53952394e-5/(a+6.))/a));" +
						"return x<0.?\(Math.PI)/(c*sin(\(Math.PI)*x)):c;" +
					"}"
			}

			################################################################################
			# Trigonometric

			if "csc" in _functions {
				functions +=
					"float csc(float x){" +
						"return 1./sin(x);" +
					"}"
			}

			if "sec" in _functions {
				functions +=
					"float sec(float x){" +
						"return 1./cos(x);" +
					"}"
			}

			if "cot" in _functions {
				functions +=
					"float cot(float x){" +
						"return 1./tan(x);" +
					"}"
			}

			if "acsc" in _functions {
				functions +=
					"float acsc(float x){" +
						"return asin(1./x);" +
					"}"
			}

			if "asec" in _functions {
				functions +=
					"float asec(float x){" +
						"return acos(1./x);" +
					"}"
			}

			if "acot" in _functions {
				functions +=
					"float acot(float x){" +
						"return atan(1./x);" +
					"}"
			}

			################################################################################
			# Hyperbolic

			if "sinh" in _functions {
				functions +=
					"float sinh(float x){" +
						"float a=exp(x);" +
						"return(a-1./a)*.5;" +
					"}"
			}

			if "cosh" in _functions {
				functions +=
					"float cosh(float x){" +
						"float a=exp(x);" +
						"return(a+1./a)*.5;" +
					"}"
			}

			if "tanh" in _functions {
				functions +=
					"float tanh(float x){" +
						"float a=exp(x),b=1./a;" +
						"return(a-b)/(a+b);" +
					"}"
			}

			if "asinh" in _functions {
				functions +=
					"float asinh(float x){" +
						"return log(abs(x)+sqrt(x*x+1.))*sign(x);" +
					"}"
			}

			if "acosh" in _functions {
				functions +=
					"float acosh(float x){" +
						"return log(x+sqrt(x*x-1.));" +
					"}"
			}

			if "atanh" in _functions {
				functions +=
					"float atanh(float x){" +
						"return.5*log(1.+2.*x/(1.-x));" +
					"}"
			}

			return
				functions +
				"float eq(float x,float y){" +
					"float r=sqrt(x*x+y*y)," +
					"theta=mod(atan(y,x),\(2*Math.PI));" +
					"return \(source);" +
				"}"
		}

		def _compile(node Node) string {
			switch node.kind {
				case .NUMBER {
					var text = node.asNumber.toString
					return "." in text ? text : text + ".0"
				}

				case .SYMBOL {
					var text = node.asString
					text = SUBSTITUTIONS.get(text, text)
					return text
				}

				case .EQUAL {
					return "(" + _compile(node.binaryLeft) + ")-(" + _compile(node.binaryRight) + ")"
				}

				case .LESS_THAN, .LESS_THAN_EQUAL {
					shadeAreaUnderCurve = true
					hideCurve = node.kind == .LESS_THAN
					return "(" + _compile(node.binaryRight) + ")-(" + _compile(node.binaryLeft) + ")"
				}

				case .GREATER_THAN, .GREATER_THAN_EQUAL {
					shadeAreaUnderCurve = true
					hideCurve = node.kind == .GREATER_THAN
					return "(" + _compile(node.binaryLeft) + ")-(" + _compile(node.binaryRight) + ")"
				}

				case .NEGATE {
					return "-(" + _compile(node.unaryValue) + ")"
				}

				case .DIVIDE {
					return "(" + _compile(node.binaryLeft) + ")/(" + _compile(node.binaryRight) + ")"
				}

				case .EXPONENT {
					_functions["_pow"] = 0
					return "_pow(" + _compile(node.binaryLeft) + "," + _compile(node.binaryRight) + ")"
				}

				case .FACTORIAL {
					_functions["gamma"] = 0
					return "gamma((" + _compile(node.unaryValue) + ")+1.)"
				}

				case .ADD, .MULTIPLY {
					var text = node.hasChildren ? "" : node.kind == .ADD ? "0." : "1."
					for child = node.firstChild; child != null; child = child.nextSibling {
						if child.previousSibling != null {
							text += node.kind == .ADD ? "+" : "*"
						}
						text += "(" + _compile(child) + ")"
					}
					return text
				}

				case .CALL {
					var text = _compile(node.callValue)
					_functions[text] = 0
					if text == "min" || text == "max" {
						return _compileVariableArgumentCall(text, node.callArguments.firstChild)
					} else {
						text += "("
						for child = node.callArguments.firstChild; child != null; child = child.nextSibling {
							text += _compile(child)
							if child.nextSibling != null {
								text += ","
							}
						}
						return text + ")"
					}
				}
			}

			return "0."
		}

		def _compileVariableArgumentCall(name string, argument Node) string {
			assert(argument.nextSibling != null)
			return name + "(" + _compile(argument) + "," + (argument.nextSibling.nextSibling == null
				? _compile(argument.nextSibling)
				: _compileVariableArgumentCall(name, argument.nextSibling)) + ")"
		}
	}

	namespace GLSLCompiler {
		const SUBSTITUTIONS = {
			"e" : "2.718281828459045",
			"ln" : "log",
			"log" : "log10",
			"Γ" : "gamma",
			"θ" : "theta",
			"π" : "3.141592653589793",
		}
	}
}
